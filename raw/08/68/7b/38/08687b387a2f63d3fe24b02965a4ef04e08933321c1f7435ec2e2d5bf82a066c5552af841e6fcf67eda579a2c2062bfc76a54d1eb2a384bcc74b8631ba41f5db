 ///
 /// @file    sequenceContainer.cc
 /// @author  lemon(haohb13@gmail.com)
 /// @date    2018-06-15 10:20:12
 ///
 
#include <iostream>
#include <vector>
#include <list>
#include <deque>
using std::cout;
using std::endl;
using std::vector;
using std::list;
using std::deque;

template <typename Container>
void display(const Container & c)
{
	typename Container::const_iterator cit = c.begin();
	for(; cit != c.end(); ++cit)
	{
		cout << *cit << " ";
	}
	cout << endl << endl;
}


void test0(void)
{
	int arr[5] = {1, 2, 3, 4, 5};

	int arr2[3] = {20, 21, 22};
	//vector<int> numbers(10, 1);
	//vector<int> numbers(arr, arr + 5);
	vector<int> numbers{1, 2, 3, 4, 5};
	cout << "sizeof(vector) = " << sizeof(numbers) << endl;
	cout << "vector's size = " << numbers.size() << endl;
	cout << "vector's capacity = " << numbers.capacity() << endl;

	cout << "numbers[3] = " << numbers[3] << endl;//vector支持随机访问

	numbers.push_back(6);//O(1)
	numbers.pop_back();
	numbers.pop_back();

	auto cit = numbers.begin();
	++cit;

	cit = numbers.insert(cit, 11);//O(N)
	cout << "*cit = " << *cit << endl;
	numbers.insert(cit, 3, 12);

	numbers.erase(cit);

	//重新获取cit的值
	cit = numbers.begin(); ++cit;
	numbers.insert(cit, arr2, arr2 + 3);
	display(numbers);
	cout << "清空所有的元素:" << endl;
	numbers.push_back(33);
	//numbers.clear();
	display(numbers);
	cout << "vector's size = " << numbers.size() << endl;
	cout << "vector's capacity = " << numbers.capacity() << endl;
	numbers.shrink_to_fit();
	cout << "vector's size = " << numbers.size() << endl;
	cout << "vector's capacity = " << numbers.capacity() << endl;

	//list<int> li(10, 1);
	list<int> li(arr, arr + 5);
	cout << "list's size = " << li.size() << endl;//list没有capacity
	li.push_front(6);
	li.push_front(7);
	li.pop_front();
	auto lit = li.begin();
	++lit;
	
	lit = li.insert(lit, 10);//lit的指向不会发生变化
	display(li);
	cout << "*lit = " << *lit << endl;
	li.insert(lit, 3, 12);
	display(li);
	cout << "*lit = " << *lit << endl;
	li.insert(lit, arr2, arr2 + 3);
	display(li);
	cout << "*lit = " << *lit << endl;
	li.erase(lit);

	//cout << li[0] << endl; //list没有下标访问运算符, 不支持随机访问

#if 0
	auto lit = li.begin();//auto可以进行自动推断
	while(lit != li.end())
	{
		cout << *lit << " ";
		++lit;
	}
	cout << endl;
#endif

	//deque<int> dequeue(arr, arr + 5);
	deque<int> dequeue = {1, 2, 3, 4, 5};
	cout << "dequeue[3] = " << dequeue[3] << endl;//时间复杂度 O(1)
	dequeue.push_front(6);
	dequeue.push_front(7);
	display(dequeue);

	dequeue.erase(++dequeue.begin());
	display(dequeue);
}
 
int main(void)
{
	test0();
	return 0;
}
