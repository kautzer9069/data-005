 ///
 /// @file    multiset.cc
 /// @author  lemon(haohb13@gmail.com)
 /// @date    2018-06-16 10:03:31
 ///
 
#include <iostream>
#include <string>
#include <set>
#include <utility>
using std::cout;
using std::endl;
using std::multiset;
using std::pair;
using std::string;
 
void test0(void)
{
	//multiset之中能存放关键字相同的元素, 默认情况下元素会以升序的方式进行排列
	//
	multiset<int> numbers{1, 8, 7, 2, 3, 2, 3, 8, 4, 9, 5, 8, 6};
	cout << "numbers' size = " << numbers.size() << endl;

	//cout << numbers[0] << endl;//error, 不支持下标访问
	
	multiset<int>::iterator it = numbers.begin();
	cout << *it << endl;
	//*it = 10;//read-only， 不能修改multiset中的元素值
			   // 底层实现是红黑树 --> 平衡二叉树 -->  加快查找元素的速度O(logN) 
	
#if 0
	pair<multiset<int>::iterator, bool> ret = numbers.insert(10);
	if(ret.second)
	{
		cout << "numbers 添加元素成功" << endl;
		cout << *(ret.first) << endl;
	} else
		cout << "numbers添加元素失败" << endl;
#endif

	for(auto & number : numbers)
	{
		cout << number << " ";
	}
	cout << endl;
}

void test1(void)
{
	pair<string, int> record("hello", 88);
	cout << record.first << " --> " << record.second << endl;
}

int main(void)
{
	test0();
	test1();
	return 0;
}
