 ///
 /// @file    map.cc
 /// @author  lemon(haohb13@gmail.com)
 /// @date    2018-06-16 11:09:25
 ///
 
#include <iostream>
#include <string>
#include <map>
using std::cout;
using std::endl;
using std::map;
using std::pair;
using std::string;

template <typename Container>
void display(const Container & c)
{
	typename Container::const_iterator cit = c.begin();
	for(; cit != c.end(); ++cit)
	{
		cout << cit-> first << " --> " << cit->second << endl;
	}
	cout << endl;
}


void test0(void)
{
	//map内部不能存放关键字相同的元素，默认情况下采用升序的方式进行排列
	//
	//容器是可以进行嵌套的
	//
	//map<int, set<>> 
	//map<int, vector<>>
	map<int, string> mapIntStr{
		pair<int, string>(1, "北京"),
		pair<int, string>(2, "上海"),
		std::make_pair(3, "广州"),
		std::make_pair(4, "深圳"),
		std::make_pair(1, "杭州")
	};

	cout << "mapIntStr's size = " << mapIntStr.size() << endl;
	display(mapIntStr);

	//operator[]： 如果对于的key存在， 就直接返回value的值;
	//如果key不存在，则直接创建一个key，对应的value设置为默认值
	cout << mapIntStr[1] << endl;//通过key获取value的值
	cout << mapIntStr[2] << endl;//O(logN)
	cout << mapIntStr[0] << endl;
	mapIntStr[0] = "武汉";//既可以修改，也可以添加元素
	mapIntStr[5] = "苏州";//添加元素

	//只查找
	map<int, string>::iterator it = mapIntStr.find(6);
	if(it != mapIntStr.end()) {
		cout << "查找成功" << endl;
		cout << it->first << " --> " << it->second << endl;
	}
	
	if(it == mapIntStr.end())
		cout << "查找的元素不存在" << endl;

	display(mapIntStr);
}
 
void test1(void)
{
	//map内部不能存放关键字相同的元素，默认情况下采用升序的方式进行排列
	map<int, string, std::greater<int>> mapIntStr{
		pair<int, string>(1, "北京"),
		pair<int, string>(2, "上海"),
		std::make_pair(3, "广州"),
		std::make_pair(4, "深圳"),
		std::make_pair(1, "杭州")
	};

	cout << "mapIntStr's size = " << mapIntStr.size() << endl;
	display(mapIntStr);

	//operator[]： 如果对于的key存在， 就直接返回value的值;
	//如果key不存在，则直接创建一个key，对应的value设置为默认值
	cout << mapIntStr[1] << endl;//通过key获取value的值
	cout << mapIntStr[2] << endl;//O(logN)
	cout << mapIntStr[0] << endl;
	mapIntStr[0] = "武汉";//既可以修改，也可以添加元素
	mapIntStr[5] = "苏州";//添加元素

	//只查找 find
	map<int, string>::iterator it = mapIntStr.find(6);
	if(it != mapIntStr.end()) {
		cout << "查找成功" << endl;
		cout << it->first << " --> " << it->second << endl;
	}
	
	if(it == mapIntStr.end())
		cout << "查找的元素不存在" << endl;

	//添加元素
	//insert
	//std::pair<std::map<int,string>::iterator, bool> ret = mapIntStr.insert(std::make_pair(6, "苏州"));
	auto ret = mapIntStr.insert(std::make_pair(6, "苏州"));
	if(ret.second)
	{
		cout << "添加元素成功" << endl;
		cout << ">> " << ret.first->first << " --> " << ret.first->second << endl;
	} else
		cout << "添加元素失败" << endl;


	display(mapIntStr);
}

void test2(void)
{
	//map内部不能存放关键字相同的元素，默认情况下采用升序的方式进行排列
	map<string, string> mapIntStr{
		pair<string, string>("aa", "北京"),
		pair<string, string>("bb", "上海"),
		std::make_pair("cc", "广州"),
		std::make_pair("dd", "深圳"),
		std::make_pair("aa", "杭州")
	};

	cout << "mapIntStr's size = " << mapIntStr.size() << endl;
	display(mapIntStr);

	//operator[]： 如果对于的key存在， 就直接返回value的值;
	//如果key不存在，则直接创建一个key，对应的value设置为默认值
	cout << mapIntStr["aa"] << endl;//通过key获取value的值
	cout << mapIntStr["bb"] << endl;//O(logN)
	cout << mapIntStr["ee"] << endl;
	mapIntStr["ee"] = "武汉";//既可以修改，也可以添加元素
	mapIntStr["ff"] = "苏州";//添加元素

	//只查找
	map<string, string>::iterator it = mapIntStr.find("gg");
	if(it != mapIntStr.end()) {
		cout << "查找成功" << endl;
		cout << it->first << " --> " << it->second << endl;
	}
	
	if(it == mapIntStr.end())
		cout << "查找的元素不存在" << endl;

	display(mapIntStr);
}
int main(void)
{
	test1();
	return 0;
}
