
learning by doing 

0. 项目准备：
使用日志系统
	class MyLog//单例模式
	{};


一、离线部分：词典的创建
 ------------------
|  word	frequency  |
|   ...    ...     |
 ------------------

1.1 创建词典的时候, 在统计的时候使用map<string, int> 存储词典 -->保存为一个文件，存放在硬盘上(HolyBible处理后的文件)

1.2 读取词典的时候使用vector<pair<string,int> > 存储词典	//单词和词频


1.3 索引文件   
												
          unordered_map<string, set<int> >    hastable//	含有i的单词出现的下标的集合
//iphone    map< string, vector<int> >                     //map<string, vector<pair<string, int> >
			                     	//   存储的是词典中的一条记录在vector中的下标值


			1010
	iphone
 i :  set<int>, index liberty .... iphone   1010		//set存放含有i的单词的，所有下标（对应vector<pair<"liberty",31>>,...）
 p :   ... iphone 		 	1010
 h :   ... iphone			1010
 o :   ... iphone			1010
 e :   ... iphone			1010
 
 中：
 国：
 
 
 
string  -->	 vector<pair<string, int> >
 a : a freq1,   able  freq2, abandon  freq3,
 b : 






二、在线部分：对客户端提供服务
2.0 从配置文件my.conf开始
配置文件的内容

 ---------------------------------------------------   
|    myip       192.168.137.128                     |
|    myport	    8888                                |
|    mydict	    /home/luo/project/data/mydict.dat   | 
|    myindex	  /home/luo/project/data/index.dat    |
|                                                   |
 ---------------------------------------------------
2.1 核心类
class MyConf
{
private:
    std::map<std::string, std::string> conf_;
};

单例类  ==>  作用类似于全局变量
class Dictionary
{//

private:
	vector<pair<string, int>> _dict;
	unordered_map<string, set<int>> _indexTable;
};

class Cache
{
private:
	//std::unordered_map<string, string> _hashMap;
	std::unordered_multimap<string, string> _hashMap;
};


class Task
{
public:
    void process()
    {
	//1. 得到词典/索引   (方法一：通过单例模式)
	//2...再做处理
	//3. 将候选词放到优先级队列
	//4. 取优先级队列中的前K个词作为返回给客户端的结果
    }	

    int calcDistance(std::string & rhs);//求最小编辑距离算法

private:
    TcpConnectionPtr conn_;// conn_->sendInLoop(msg);
    string query_;
    //...
    std::priority_queue<MyResult> que_;//把结果存入一个优先级队列
};

//为计算的结果封装一个类MyResult
struct MyResult
{
    std::string  candidate_word;
    int frequency;
    int distance;
};

MyResult r1;
MyResult r2;

bool compareResult(const MyResult & lhs, const MyResult & rhs);

3. 求解字符串的相似度的方法(算法)
    * 最长公共子序列 LCS  
    * 最小编辑距离   (iphoe  -->  iphone  推荐这种方法)
    									iphone
			编辑的方式：添加[1]、修改[1]、删除[1]
			          
			      距离d　　　d1 = 3   小于3的情况下，认为两字符串是相似的

   iphone  6    4      0.67     0.6
   iphoe   5    4
   
   

三、提高查询的速度

Q1. 增加缓存（cache）机制
class MyCache
{

private:
    std::unordered_map<query, result>;
};


　只提供一个全局的缓存Cache   读和写
  　　　　临界资源 -->  互斥访问 --> 加锁 --> 降低了查询效率
  

Q2. 缓存的存在位置：
    一个线程对应操作一个cache

Q3. 缓存的更新：
        假设有N个cache,给每个cache一个编号0, 1, 2, N - 1,
    每隔一段时间（如10分钟）把除0号cache之外的cache写入到0号cache
  	之中，这样0号cache就会共享所有cache的内容；再把0号cache的内容
  	一次写入到1, 2, ..., N - 1号cache之中；经过上述过程之后，所有
  	cache的内容就达到一致的状态了。除此之外，还需将0号cache的内容
  	写入到硬盘cache（文件/数据库），作为cache的备份。


四、处理中文 

Q1. 对中文进行分词 -->分词库： 
	海量公司(商业)        http://www.hylanda.com/
	中科院(免费：NLPIR)   http://ictclas.nlpir.org/  
	结巴分词库(cppjieba)  https://github.com/yanyiwu/cppjieba
	
Q1. 编码规则 UTF-8 -->写出一个中英文通用的最小编辑距离算法 

CppJieba代码详解
	http://yanyiwu.com/work/2014/02/10/cppjieba-dai-ma-xiang-jie.html
	
	
	
      0000 0001
      
      1000 0000
  &   1xxx xxxx
      1000 0000   多字节的字符
      
      0100 0000
  &   1xxx xxxx
      0100 0000 
       
       hello       
       
 线程局部存储